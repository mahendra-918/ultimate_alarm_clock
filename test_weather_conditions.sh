#!/bin/bash

# Weather-Based Alarm Condition Testing Script
# This script helps you test all weather-based smart control conditions

echo "üå§Ô∏è Weather-Based Alarm Condition Testing Guide"
echo "================================================"
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üì± Pre-Testing Setup:${NC}"
echo "1. Enable location permissions for the app"
echo "2. Make sure internet connection is available"
echo "3. Connect device to computer for ADB logging"
echo "4. Open Android Studio Logcat or run: adb logcat -s WeatherFetcherService WeatherCondition Weather WeatherTypes WeatherMatch"
echo ""

echo -e "${YELLOW}üß™ Testing Strategy:${NC}"
echo "We'll test each condition type by:"
echo "‚Ä¢ Setting an alarm with the specific weather condition"
echo "‚Ä¢ Selecting weather types (sunny, cloudy, rainy, windy, stormy)"
echo "‚Ä¢ Letting the alarm fire and observing the behavior"
echo "‚Ä¢ Checking logs to see weather evaluation logic"
echo ""

echo -e "${GREEN}üå¶Ô∏è Weather Condition Types Available:${NC}"
echo ""
echo "0Ô∏è‚É£  OFF - No weather condition (always rings)"
echo "1Ô∏è‚É£  RING_WHEN_MATCH - Ring alarm when current weather matches selected types"
echo "2Ô∏è‚É£  CANCEL_WHEN_MATCH - Cancel alarm when current weather matches selected types"
echo "3Ô∏è‚É£  RING_WHEN_DIFFERENT - Ring alarm when current weather is different from selected types"
echo "4Ô∏è‚É£  CANCEL_WHEN_DIFFERENT - Cancel alarm when current weather is different from selected types"
echo ""

echo -e "${GREEN}üå§Ô∏è Weather Types Available:${NC}"
echo ""
echo "0Ô∏è‚É£  SUNNY - Clear skies, no clouds, wind < 20km/h, no rain"
echo "1Ô∏è‚É£  CLOUDY - Cloud cover > 60%"
echo "2Ô∏è‚É£  RAINY - Rain > 0mm (but wind < 40km/h)"
echo "3Ô∏è‚É£  WINDY - Wind speed > 20km/h (but no rain)"
echo "4Ô∏è‚É£  STORMY - Rain > 0mm AND wind > 40km/h"
echo ""

echo -e "${YELLOW}üìã DETAILED TEST PLAN:${NC}"
echo ""

echo -e "${BLUE}=== Test 1: OFF Condition (Index 0) ===${NC}"
echo "üìù Expected: Alarm rings regardless of weather"
echo "üì± Setup:"
echo "   ‚Ä¢ Set weather condition to 'OFF'"
echo "   ‚Ä¢ Set alarm for 2 minutes from now"
echo "‚úÖ Expected Result: Alarm should ALWAYS ring"
echo ""

echo -e "${BLUE}=== Test 2: RING_WHEN_MATCH (Index 1) ===${NC}"
echo "üìù Expected: Alarm rings only when weather matches selected types"
echo "üì± Setup:"
echo "   ‚Ä¢ Set weather condition to 'Ring When Match'"
echo "   ‚Ä¢ Select weather types (e.g., sunny, rainy)"
echo "   ‚Ä¢ Set alarm for 2 minutes from now"
echo "‚úÖ Expected Result:"
echo "   ‚Ä¢ If current weather is sunny OR rainy ‚Üí Alarm RINGS"
echo "   ‚Ä¢ If current weather is cloudy/windy/stormy ‚Üí Alarm DOES NOT ring"
echo ""

echo -e "${BLUE}=== Test 3: CANCEL_WHEN_MATCH (Index 2) ===${NC}"
echo "üìù Expected: Alarm cancels when weather matches selected types"
echo "üì± Setup:"
echo "   ‚Ä¢ Set weather condition to 'Cancel When Match'"
echo "   ‚Ä¢ Select weather types (e.g., rainy, stormy)"
echo "   ‚Ä¢ Set alarm for 2 minutes from now"
echo "‚úÖ Expected Result:"
echo "   ‚Ä¢ If current weather is rainy OR stormy ‚Üí Alarm DOES NOT ring"
echo "   ‚Ä¢ If current weather is sunny/cloudy/windy ‚Üí Alarm RINGS"
echo ""

echo -e "${BLUE}=== Test 4: RING_WHEN_DIFFERENT (Index 3) ===${NC}"
echo "üìù Expected: Alarm rings when weather is different from selected types"
echo "üì± Setup:"
echo "   ‚Ä¢ Set weather condition to 'Ring When Different'"
echo "   ‚Ä¢ Select weather types (e.g., sunny)"
echo "   ‚Ä¢ Set alarm for 2 minutes from now"
echo "‚úÖ Expected Result:"
echo "   ‚Ä¢ If current weather is sunny ‚Üí Alarm DOES NOT ring"
echo "   ‚Ä¢ If current weather is cloudy/rainy/windy/stormy ‚Üí Alarm RINGS"
echo ""

echo -e "${BLUE}=== Test 5: CANCEL_WHEN_DIFFERENT (Index 4) ===${NC}"
echo "üìù Expected: Alarm cancels when weather is different from selected types"
echo "üì± Setup:"
echo "   ‚Ä¢ Set weather condition to 'Cancel When Different'"
echo "   ‚Ä¢ Select weather types (e.g., rainy, stormy)"
echo "   ‚Ä¢ Set alarm for 2 minutes from now"
echo "‚úÖ Expected Result:"
echo "   ‚Ä¢ If current weather is rainy OR stormy ‚Üí Alarm RINGS"
echo "   ‚Ä¢ If current weather is sunny/cloudy/windy ‚Üí Alarm DOES NOT ring"
echo ""

echo -e "${RED}üö® IMPORTANT LOG PATTERNS TO WATCH:${NC}"
echo ""
echo "‚úÖ Success patterns:"
echo "   WeatherFetcherService: onStartCommand called"
echo "   WeatherFetcherService: Weather types JSON: [0,2], condition type: 1"
echo "   WeatherFetcherService: Converted weather types: sunny,rainy"
echo "   Weather: Current weather: sunny"
echo "   WeatherMatch: Weather matches selected types: true"
echo "   WeatherCondition: Ring when match: shouldRing = true"
echo ""
echo "‚ùå Error patterns to watch for:"
echo "   WeatherFetcherService: No network connectivity"
echo "   WeatherFetcherService: Failed to get location"
echo "   WeatherFetcherService: Weather API error"
echo "   WeatherFetcherService: Error parsing weather types"
echo ""

echo -e "${GREEN}üîß TROUBLESHOOTING TIPS:${NC}"
echo ""
echo "‚ùì If weather condition doesn't trigger:"
echo "   ‚Ä¢ Check internet connection"
echo "   ‚Ä¢ Verify location permissions are granted"
echo "   ‚Ä¢ Look for WeatherFetcherService logs"
echo "   ‚Ä¢ Check if weather API is responding"
echo ""
echo "‚ùì If logs show 'Weather API error':"
echo "   ‚Ä¢ Check network connectivity"
echo "   ‚Ä¢ Wait a few minutes and try again"
echo "   ‚Ä¢ The app will default to ring on API failure"
echo ""
echo "‚ùì If weather evaluation seems wrong:"
echo "   ‚Ä¢ Check 'Current weather:' log"
echo "   ‚Ä¢ Verify 'Selected types:' matches your selection"
echo "   ‚Ä¢ Confirm 'Weather matches' logic is correct"
echo ""

echo -e "${BLUE}üéØ TESTING WORKFLOW:${NC}"
echo ""
echo "1. üîß Run log monitor: ./quick_weather_test.sh"
echo "2. üì± Create alarm with weather condition in the app"
echo "3. ‚è∞ Wait for alarm to fire (2-3 minutes)"
echo "4. üìä Observe logs and behavior"
echo "5. üìù Record results in weather_test_results.md"
echo "6. üîÑ Repeat for each condition type"
echo ""

echo -e "${GREEN}‚ö° QUICK TEST COMMANDS:${NC}"
echo ""
echo "Start log monitoring:"
echo "  ./quick_weather_test.sh"
echo ""
echo "Check current weather manually:"
echo "  adb logcat -s Weather WeatherCondition | grep 'Current weather'"
echo ""
echo "Clear logs before testing:"
echo "  adb logcat -c"
echo ""

echo -e "${YELLOW}üìä Ready to start testing!${NC}"
echo "Remember to document your results in weather_test_results.md"
echo "" 